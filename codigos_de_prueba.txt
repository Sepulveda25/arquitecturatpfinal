### 1 PRUEBA DE UNIDAD DE CORTO => BIEN
ADDI r1, r1, 0x3 ; en etapa WB => Hex: 0x20210003
ADDI r2, r2, 0x7 ; en etapa MEM => Hex: 0x20420007
ADD r3, r1, r2 ; en etapa EX => Hex: 0x00221820
SUB r5,r3,r1; en etapa IF => Hex: 0x00612822
HLT ; fin

resultado r5=7

### 1A UNIDAD DE CORTO FUNCIONA PARA DEPENDENCIA EN r4 Y r2 => BIEN
ADDI r2, r2, 0x4; r2=4 Hex: 0x20420004
ADDI r4, r4, 0x1E; Hex: 0x2084001E
SW r4, 0x0(r2); Hex: 0xAC440000
LW r3,0x0(r2); r3=r4 Hex: 0x8C430000


### 2 PRUEBA DE UNIDAD DE DETECCION DE RIESGOS MAS UNIDAD DE CORTO => BIEN
ADDI r4, r4, 0x1E; r4=30 Hex: 0x2084001E
ADDI r2, r2, 0x4; r2=4 Hex: 0x20420004
ADDI r3, r3, 0x5; r3=5 Hex: 0x20630005
SW r4, 0x0(r2); memoria[r2+0x0]<=r4 Hex: 0xAC440000
LW r1,0x0(r2); r1=r4 Hex: 0x8C410000
SUB r5,r1,r3; Hex: 0x00232822

### 3 PRUEBA DE STORAGE Y LOAD => BIEN
ADDI r1, r1, 0x4 ; indice Hex: 0x20210004
ADDI r2, r2, 0xa ; Hex: 0x2042000A
ADDI r3, r3, 0xf ; Hex: 0x2063000F
ADDI r4, r4, 0x14 ; Hex: 0x20840014
SW r2, 0x0(r1); guardo Hex: 0xAC220000
SW r3, 0x4(r1); Hex: 0xAC230004
SW r4, 0x8(r1); Hex: 0xAC240008
LW r5, 0x0(r1); r5=r2 Hex: 0x8C250000
LW r6, 0x4(r1); r6=r3 Hex: 0x8C260004
LW r7, 0x8(r1); r7=r4 Hex: 0x8C270008

### 4 PRUEBA FLAGS JAL Y JALR
JAL 0xe; se guarda PC+8 en r31 Hex: 0x0C00000E
JALR r1, r2; se guarda PC+8 en r1 Hex: 0x00400809
ADD r3,r4,r31; se verifica la escritura de r31 r3=0+(PC+8) Hex: 0x009F1820  
ADD r5,r4,r1; se verifica la escritura de r1 Hex: 0x00812820

### N prueba de branch
		ADDI r1, r1, 0x1;
		ADDI r2, r2, 0x14; seria la i del for, tiene que ser multiplo de 4 
		ADDI r5, r5, 0x0; en que valor quiero detener el loop
loop:
		ADDI r2,r2,0xfffc; resta 4 
		SLLV r4,r1,r1; r1<<r1
		NOP
		BNE r2,r5,loop 
		SW r4,0x4(r2) 
